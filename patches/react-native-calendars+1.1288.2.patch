diff --git a/node_modules/react-native-calendars/src/day-state-manager.js b/node_modules/react-native-calendars/src/day-state-manager.js
index 11d4ee2..7fd9d0c 100644
--- a/node_modules/react-native-calendars/src/day-state-manager.js
+++ b/node_modules/react-native-calendars/src/day-state-manager.js
@@ -9,14 +9,15 @@ export function getState(day, current, props) {
     else if (isToday(day)) {
         state = 'today';
     }
+
     if (disabledByDefault) {
         state = 'disabled';
     }
     else if (isDateNotInRange(day, minDate, maxDate)) {
         state = 'disabled';
     }
-    else if (!sameMonth(day, current)) {
-        state = 'disabled';
-    }
+    // else if (!sameMonth(day, current)) {
+    //     state = 'disabled';
+    // }
     return state;
 }
diff --git a/node_modules/react-native-calendars/src/expandableCalendar/WeekCalendar/index.js b/node_modules/react-native-calendars/src/expandableCalendar/WeekCalendar/index.js
index e70a3dd..02b97f0 100644
--- a/node_modules/react-native-calendars/src/expandableCalendar/WeekCalendar/index.js
+++ b/node_modules/react-native-calendars/src/expandableCalendar/WeekCalendar/index.js
@@ -133,7 +133,7 @@ class WeekCalendar extends Component {
             {/* {this.props.weekNumbers && <Text allowFontScaling={false} style={this.style.dayHeader}></Text>} */}
             {this.renderWeekDaysNames()}
           </View>)}
-        <FlatList ref={this.presenter.list} data={items} extraData={extraData} style={this.style.container} horizontal showsHorizontalScrollIndicator={false} pagingEnabled scrollEnabled renderItem={this.renderItem} keyExtractor={this.keyExtractor} initialScrollIndex={NUMBER_OF_PAGES} getItemLayout={this.getItemLayout} onScroll={this.onScroll} onMomentumScrollEnd={this.onMomentumScrollEnd}/>
+        <FlatList ref={this.presenter.list} data={items} extraData={extraData} style={this.style.container} horizontal showsHorizontalScrollIndicator={false} pagingEnabled scrollEnabled={false} renderItem={this.renderItem} keyExtractor={this.keyExtractor} initialScrollIndex={NUMBER_OF_PAGES} getItemLayout={this.getItemLayout} onScroll={this.onScroll} onMomentumScrollEnd={this.onMomentumScrollEnd}/>
       </View>);
     }
 }
diff --git a/node_modules/react-native-calendars/src/expandableCalendar/index.js b/node_modules/react-native-calendars/src/expandableCalendar/index.js
index 6e78cc8..abe8318 100644
--- a/node_modules/react-native-calendars/src/expandableCalendar/index.js
+++ b/node_modules/react-native-calendars/src/expandableCalendar/index.js
@@ -213,10 +213,10 @@ const ExpandableCalendar = (props) => {
             // disable pan detection when vertical calendar is open to allow calendar scroll
             return false;
         }
-        if (!isOpen && gestureState.dy < 0) {
-            // disable pan detection to limit to closed height
-            return false;
-        }
+        // if (!isOpen && gestureState.dy < 0) {
+        //     // disable pan detection to limit to closed height
+        //     return false;
+        // }
         return gestureState.dy > 5 || gestureState.dy < -5;
     };
     const handlePanResponderMove = (_, gestureState) => {
@@ -379,7 +379,7 @@ const ExpandableCalendar = (props) => {
         }
     }, [numberOfDays]);
     const renderCalendarList = () => {
-        return (<CalendarList testID="calendar" horizontal={horizontal} firstDay={firstDay} calendarStyle={calendarStyle} {...others} current={date} theme={themeObject} ref={calendarList} onDayPress={_onDayPress} onVisibleMonthsChange={onVisibleMonthsChange} pagingEnabled scrollEnabled={isOpen} hideArrows={shouldHideArrows} onPressArrowLeft={_onPressArrowLeft} onPressArrowRight={_onPressArrowRight} hideExtraDays={!horizontal && isOpen} renderArrow={_renderArrow} staticHeader numberOfDays={numberOfDays} headerStyle={numberOfDaysHeaderStyle} timelineLeftInset={timelineLeftInset}/>);
+        return (<CalendarList testID="calendar" horizontal={horizontal} firstDay={firstDay} calendarStyle={calendarStyle} {...others} current={date} theme={themeObject} ref={calendarList} onDayPress={_onDayPress} onVisibleMonthsChange={onVisibleMonthsChange} pagingEnabled scrollEnabled={false} hideArrows={shouldHideArrows} onPressArrowLeft={_onPressArrowLeft} onPressArrowRight={_onPressArrowRight} hideExtraDays={!horizontal && isOpen} renderArrow={_renderArrow} staticHeader numberOfDays={numberOfDays} headerStyle={numberOfDaysHeaderStyle} timelineLeftInset={timelineLeftInset}/>);
     };
     return (<View testID={testID} style={containerStyle}>
       {screenReaderEnabled ? (<Calendar testID="calendar" {...others} theme={themeObject} onDayPress={_onDayPress} hideExtraDays renderArrow={_renderArrow}/>) : (<Animated.View ref={wrapper} style={wrapperStyle} {...panResponder.panHandlers}>
